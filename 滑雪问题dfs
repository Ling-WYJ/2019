#include<iostream>
#include<list>
#include <algorithm>
#include <iterator>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

const int maxi=102;
int map[maxi][maxi];
int prio[4][2]={{1,0},{0,1},{-1,0},{0,-1}};
int maxstep=0;
int visited[maxi][maxi]={0};
int row,col;
void dfs(int x,int y,int step)
{
   if(step>maxstep)
   maxstep=step;
   for(int i=0;i<4;i++)
   {
      int try_x=x+prio[i][0];
      int try_y=y+prio[i][1];
      if(try_x>-1&&try_x<row&&try_y>-1&&try_y<col&&visited[try_x][try_y]==0&&map[try_x][try_y]<map[x][y])
      {
         visited[try_x][try_y]=1;
         dfs(try_x,try_y,step+1);
          visited[try_x][try_y]=0;

      }

   }
}

int main()
{
   
   cin>>row>>col;
   for(int i=0;i<row;i++)
   {
      for(int j=0;j<col;j++)
      {
         cin>>map[i][j];
      }
   }
   for(int i=0;i<row;i++)
   {
      for(int j=0;j<col;j++)
      {
         visited[i][j]=1;
         dfs(i,j,1);
         visited[i][j]=0;

      }
   }
   cout<<maxstep;
}
