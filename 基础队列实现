#include<iostream>
#include<list>
#include <algorithm>
#include <iterator>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

enum  Error_code{underflow, overflow, success};
const int maxqueue = 8; //  small value for testing

template<class Queue_entry>
class CirQueue {
public:
   CirQueue();
   bool empty() const;
   Error_code serve();
   Error_code append(const Queue_entry &item);
   Error_code retrieve(Queue_entry &item) const;
   bool full() const;
   int size() const;
   void clear();
   Error_code serve_and_retrieve(Queue_entry &item);
private:
   int count;
   int front, rear;
   Queue_entry entry[maxqueue];
};

template<class Queue_entry>
CirQueue<Queue_entry>::CirQueue()
{
  count=0;
  rear=maxqueue-1;
  front=0;
}

template<class Queue_entry>
bool CirQueue<Queue_entry>::empty() const
 {
    return (count==0);
 }

template<class Queue_entry>
Error_code CirQueue<Queue_entry>::serve()
{
   if(count<=0)
   return underflow;
   count--;
   front=(front+1)%maxqueue;
   return success;


}

template<class Queue_entry>
Error_code CirQueue<Queue_entry>::append(const Queue_entry &item)
{
   if(count>=maxqueue)
      return overflow;
   rear=(rear+1)%maxqueue;
   entry[rear]=item;
   count++;
   return success;
}

template<class Queue_entry>
Error_code CirQueue<Queue_entry>::retrieve(Queue_entry &item) const
{
   if(count<0)
      return underflow;
   item=entry[front];
   return success;
}

template<class Queue_entry>
bool CirQueue<Queue_entry>::full() const
{
   return (count==maxqueue);
}

template<class Queue_entry>
int CirQueue<Queue_entry>::size() const
{
   return count;
}

template<class Queue_entry>
void CirQueue<Queue_entry>::clear()
{
  count=0;
  rear=maxqueue-1;
  front=0;

}

template<class Queue_entry>
Error_code CirQueue<Queue_entry>::serve_and_retrieve(Queue_entry &item)
{
   if(count<=0)
   return underflow;
   item=entry[front];
   count--;
   front=(front+1)%maxqueue;
   return success;
}

int main()
{
   int n,i,item;
   CirQueue<int> cirqueue;
   cin>>n;
   getchar();
   for(i=0;i<n;i++)
   {
      cin>>item;
      if(!cirqueue.full()){
         cirqueue.append(item);
      }
      else
      {
         cout<<"This queue is overflow!"<<endl;
         break;
      }

   }
   while(!cirqueue.empty())
   {
      cirqueue.serve_and_retrieve(item);
      cout<<item<<" ";
   }
}
