const int maxstack=100;
typedef int type;
class myquene
{public:
   myquene();
   bool is_empty()const;
   void append(const type &cjn);
   void serve();
   type retrieve();
   bool full()const;
   void clear();
 private:
  int count;
  type entry[maxstack];
  int front,rear;
};
myquene::myquene()
{
  count=0;
  front=0;
  rear=maxstack-1;
}
void myquene::append(const type &cjn)
{
 rear=(rear+1)%maxstack;
 entry[rear]=cjn;
 count++;
}
void myquene::serve()
{count--;
 front=(front+1)%maxstack;
}
bool myquene::is_empty()const
{if (count==0)
    return true;
 return false;
}
type myquene::retrieve()
{return entry[front];
}
bool myquene::full()const
{if (count==maxstack)
   return true;
 return false;
}
int main()
{
  int a;
  myquene cjn;
 while (scanf("%d",&a)&&a!=-1)
   {cjn.append(a);
   }
 while (!cjn.is_empty())
    {printf("%d ",cjn.retrieve());
     cjn.serve();
}  
return 0;
}
